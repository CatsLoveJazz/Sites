/******************************************************************************
 * IndyScot
 *
 * Graeme Lyon
 * Feb 2014
 *****************************************************************************/

// GLOBALS
float[] xballs_orig = {
  31.4827, 38.3985, 36.8847, 38.6853, 35.9612, 44.6850, 38.3522, 30.3113, 47.1963, 27.9443, 48.7638, 36.0408, 32.0138, 49.9833, 44.9256, 37.5731, 45.9508, 43.1694, 41.1374, 39.9419, 50.0259, 27.9647, 48.8563, 40.5026, 47.6090, 31.4938, 35.8798, 37.8433, 41.7796, 39.6458, 45.2347, 33.5887, 49.6909, 55.5833, 48.0828, 59.7176, 41.5020, 31.1496, 54.2860, 51.9469, 38.3763, 43.0028, 44.1743, 35.6337, 57.5764, 46.4320, 40.1621, 60.8594, 41.3354, 37.0753, 54.8468, 50.4201, 53.6272, 48.8989, 59.3197, 31.8843, 51.8099, 35.0285, 33.4351, 62.1456, 39.8827, 36.2203, 50.2646, 42.5957, 56.2791, 40.9912, 47.0705, 60.4523, 49.1339, 45.1939, 50.0611, 53.8641, 38.0172, 36.1074, 42.8918, 51.8710, 59.7620, 57.5875, 41.1244, 35.1951, 46.8391, 66.2688, 54.5229, 63.3374, 37.0327, 48.6268, 56.1181, 39.1165, 60.2210, 19.4926, 66.7536, 44.3926, 59.0976, 54.1343, 55.8183, 57.7023, 46.4117, 41.4538, 53.1794, 39.2997, 36.0963, 19.6073, 21.8484, 58.6646, 56.2421, 48.1383, 51.0234, 67.6308, 57.5579, 20.6399, 61.3480, 37.5213, 39.8105, 53.6568, 65.9320, 68.9337, 59.1235, 70.9823, 38.9759, 43.4803, 47.0168, 64.6106, 56.0423, 50.5681, 62.2955, 48.5399, 60.2469, 23.4843, 67.9973, 47.4258, 70.6992, 65.5785, 64.3016, 28.0313, 24.3689, 22.1852, 55.4501, 58.3093, 63.0820, 48.5991, 46.7947, 69.9312, 55.6462, 52.1523, 43.1564, 21.9502, 64.0832, 65.2657, 62.6897, 23.9007, 41.8332, 60.4060, 38.2874, 68.6931, 27.4946, 66.3724, 46.0230, 47.6738, 63.1708, 43.7856, 70.8546, 44.9330, 57.6856, 49.2524, 61.4979, 34.3863, 25.1110, 46.4672, 14.0851, 59.4641, 56.0275, 47.5017, 63.2393, 61.1000, 48.5732, 25.9716, 57.4173, 62.3825, 72.0575, 46.3228, 34.9674, 59.3438, 47.8218, 63.2079, 36.8366, 53.8215, 22.5979, 11.7977, 10.4745, 67.0053, 29.5414, 57.5709, 35.8113, 56.2384, 38.6890, 25.9753, 61.4072, 55.3520, 47.2204, 50.8254, 13.3004, 42.6864, 24.2616, 33.9477, 72.5220, 70.7972, 17.4180, 53.7605, 64.1202, 47.7496, 69.8645, 56.2847, 62.7637, 47.9551, 24.7742, 54.6636, 17.4624, 48.8730, 46.3654, 38.6594, 66.0800, 63.9888, 49.3042, 18.0824, 23.8989, 19.2631, 65.1325, 36.1056, 30.9664, 39.6069, 34.6602, 41.9276, 47.3758, 37.9155, 44.1539, 20.6862, 45.5178, 19.1039, 49.2875, 40.6895, 56.5012, 34.9748, 54.5914, 39.8475, 50.4645, 20.5326, 42.9325, 25.8161, 55.5370, 49.8297, 51.8710, 57.0379, 54.2805, 36.6515, 52.5131, 44.1021, 40.5526, 46.9724, 33.8737, 51.5934, 26.1381, 27.7907, 50.1592, 55.8054, 42.8825, 38.8463, 37.1549, 41.5963, 44.1076, 34.8786, 40.4194, 53.5883, 25.4238, 65.7340, 51.2214, 49.9149, 33.3389, 61.7810, 48.9118, 14.2127, 58.3407, 64.3849, 12.8229, 45.0033, 55.9534, 36.0963, 34.5510, 38.9259, 62.9654, 47.5701, 43.2952, 40.0307, 60.5948, 25.3572, 41.6371, 17.4365, 18.9244, 39.0110, 20.6881, 50.6163, 53.7827, 29.6950, 40.6414, 17.0072, 56.4846, 35.9112, 19.0651, 52.0468, 5.9164, 45.5030, 56.6622, 57.9725, 16.7333, 39.9308, 37.6083, 61.7033, 59.1217, 15.5322, 64.7217, 50.2535, 33.4407, 17.3070, 18.3359, 35.5356, 36.9365, 38.0043, 41.4594, 50.6237, 53.7475, 9.1532, 49.6558, 64.6698, 66.9165, 17.0553, 40.6766, 42.4402, 20.2550, 37.9784, 57.7707, 16.2077, 32.5283, 23.8415, 61.5923, 48.4899, 34.0495, 49.9741, 21.4764, 65.1492, 42.9325, 41.4798, 56.1126, 39.4681, 44.2335, 50.0518, 24.9741, 27.5335, 54.4563, 42.1330, 19.3612, 58.3278, 52.4280, 66.0578, 25.8087, 36.0722, 53.6365, 64.0406, 56.3717, 43.3951, 40.9209, 47.2315, 32.5450, 60.3912, 22.1963, 27.6353, 66.8517, 51.1585, 54.9874, 42.3884, 44.5185, 26.4786, 39.7513, 41.4779, 57.8984, 24.1117, 33.2464, 38.6668, 49.9260, 66.4649, 52.3484, 68.8596, 65.2898, 55.4760, 56.3680, 39.8901, 41.2188, 38.1394, 58.3740, 66.4409, 46.7096, 43.4729, 45.4771, 35.7873, 49.1617, 37.2622, 26.5323, 39.2701, 72.0038, 70.7806, 56.8602, 45.2347, 47.1186, 40.2232, 68.9244, 13.7390, 67.2033, 48.4714, 41.5593, 42.7659, 57.6893, 53.0332, 37.7896, 70.5604, 25.4960, 23.3215, 62.4917, 72.7515, 31.5012, 26.8099, 47.7367, 40.7043, 45.8028, 57.0472, 43.7912, 49.0099, 19.7702, 71.0693, 57.9169, 38.7742, 26.8987, 47.9884, 44.8053, 37.5638, 50.3091, 73.3881, 58.3518, 68.7893, 35.9409, 56.4235, 51.1252, 41.5038, 38.4003, 55.6296, 57.4728, 26.6933, 66.1115, 20.2458, 43.8819, 35.0044, 52.8166, 54.5396, 46.7614, 51.7044, 59.3253, 37.0309, 71.5801, 0.2110, 38.9000, 58.1871, 49.5299, 27.4132, 15.3934, 13.5817, 73.8582, 17.1848, 61.3943, 67.2866, 62.5601, 42.2459, 64.7753, 68.9910, 38.1190, 39.1646, 60.5800, 45.2569, 52.8574, 32.4543, 28.8104, 67.7807, 51.6193, 59.3549, 75.5589, 0.4423, 70.8343, 26.8007, 66.6704, 64.8660, 18.7912, 48.0124, 56.3772, 68.9374, 34.8860, 53.3478, 31.8806, 40.5026, 37.8914, 76.0512, 62.2511, 15.6100, 30.2632, 59.1032, 47.0464, 43.2378, 44.4074, 64.7420, 70.6973, 73.5436, 52.9573, 67.3088, 45.3827, 24.7909, 37.0087, 10.5171, 19.4833, 47.8625, 50.4312, 32.8466, 69.3131, 59.2401, 60.4153, 77.0930, 53.7419, 0.4016, 12.9802, 9.2161, 31.4383, 45.9731, 15.5970, 61.4054, 29.0343, 13.8186, 38.3504, 32.6301, 47.4998, 59.4289, 52.7167, 68.6783, 13.3541, 34.3493, 65.0437, 36.3609, 70.3013, 47.0982, 60.1895, 61.2943, 71.3228, 72.5979, 40.6618, 62.4047, 27.5650, 42.6234, 22.6849, 39.2590, 75.6810, 48.9507, 30.9812, 15.6174, 11.5127, 50.7902, 74.2116, 32.6893, 52.2578, 44.2039, 26.4453, 38.0506, 40.0030, 55.9090, 61.0445, 70.5770, 60.1062, 35.5189, 28.7827, 68.4433, 41.4242, 72.2944, 62.6194, 11.6774, 76.1178, 45.3216, 52.5779, 30.0170, 27.2133, 64.7402, 26.0697, 37.4158, 28.2441, 62.1030, 32.9373, 16.2114, 60.5319, 59.3549, 0.0000, 14.4885, 2.2670, 73.2715, 34.7509, 74.8131, 36.4294, 24.2153, 33.0965, 15.4194, 30.9275, 28.7290, 39.6736, 43.1139, 26.6582, 35.7336, 46.1526, 30.1447, 48.2604, 28.5920, 47.2999, 26.1936, 25.1369, 33.0742, 35.7576, 23.9544, 27.4225, 38.2597, 39.8475, 7.1934, 5.5370, 29.3175, 8.0742, 43.2656, 36.6737, 8.9607, 33.9829, 10.4375, 32.3210, 39.5736, 10.4282, 31.2828, 9.1957, 6.8158, 38.0413, 30.1891, 45.8602, 36.7829, 41.3076, 40.0714, 33.0668, 35.1710, 38.1727, 10.8280, 47.2796, 50.0130, 45.1588, 13.4355, 9.1550, 40.1140, 43.8763, 42.2700, 7.6005, 5.2965, 48.9692, 35.4912, 39.0777, 8.3592, 37.4325, 9.6880, 49.5022, 40.6544, 50.9179, 7.4117, 33.6128, 47.2278, 31.7973, 15.3435, 52.6686, 6.9805, 46.1452, 48.6879, 10.7484, 54.3860, 41.9572, 47.3980, 44.1076, 45.7658, 55.7388, 13.4706, 39.3830, 36.5034, 52.4206, 54.3971, 56.6974, 11.3313, 44.9941, 50.3572, 41.9461, 47.6220, 15.0955, 51.9820, 34.9785, 44.0521, 11.9161, 54.3971, 13.7964, 37.0401, 18.6857, 16.4649, 49.6114, 38.6243, 35.8668, 51.1696, 14.6032, 18.3193, 45.8306, 41.9720, 48.6379, 57.8041, 37.4695, 52.8259, 17.9047, 50.0666, 60.6077, 35.4597, 37.7341, 54.9152, 47.4517, 36.9087, 51.1252, 49.0636, 17.8196, 48.1309, 34.4918, 60.0044, 53.5199, 56.8991, 36.1315, 55.6703, 58.5369, 57.0694, 59.2457, 62.9599, 61.0982, 59.3216, 62.8933, 66.4575, 70.2698, 63.9851,
};
float[] yballs_orig = {
  100.0000, 98.9692, 98.1975, 98.0513, 97.4813, 97.3518, 97.1797, 96.6874, 95.6936, 95.5752, 95.5437, 95.5048, 95.2532, 95.2087, 95.0403, 94.7257, 94.6332, 94.4704, 94.3889, 94.3778, 94.0558, 94.0521, 93.9078, 93.6616, 93.4895, 93.4673, 93.4599, 93.0491, 92.8973, 92.7733, 92.4069, 92.2774, 92.1238, 92.0053, 91.9517, 91.8388, 91.7777, 91.6463, 91.5112, 91.4224, 91.2947, 91.1670, 91.1485, 91.1133, 91.0375, 91.0060, 91.0041, 90.8913, 90.7247, 90.6192, 90.4490, 90.3490, 90.2602, 90.1510, 90.0733, 90.0400, 89.8327, 89.7957, 89.7772, 89.7624, 89.6773, 89.4459, 89.3663, 89.3460, 89.2146, 89.1776, 89.0258, 88.9129, 88.7704, 88.6317, 88.5613, 88.4392, 88.3115, 88.1005, 87.6212, 87.4880, 87.3566, 87.3140, 87.2733, 87.2603, 87.0734, 86.9994, 86.9513, 86.9235, 86.8865, 86.8773, 86.8680, 86.7107, 86.4405, 86.4387, 86.2296, 86.0278, 85.8372, 85.6540, 85.6225, 85.6207, 85.5818, 85.4190, 85.3561, 85.1821, 85.1821, 85.1506, 84.9711, 84.9415, 84.4511, 84.4215, 84.3919, 84.2994, 84.2697, 84.0865, 84.0384, 83.8386, 83.7830, 83.5480, 83.4444, 83.4370, 83.3333, 83.2593, 82.9780, 82.7171, 82.6690, 82.5820, 82.5746, 82.5450, 82.2396, 82.2211, 81.9343, 81.7511, 81.4790, 81.3495, 81.2791, 81.0312, 81.0145, 80.9534, 80.8035, 80.6647, 80.6555, 80.5722, 80.3094, 80.1466, 79.9689, 79.9282, 79.8209, 79.7857, 79.4285, 79.3915, 79.3730, 79.3064, 79.2250, 79.1657, 79.1583, 79.0825, 79.0214, 78.9936, 78.8604, 78.8419, 78.7993, 78.5550, 78.1405, 78.0591, 78.0369, 77.9980, 77.8777, 77.8759, 77.8111, 77.6723, 77.6408, 77.4613, 77.4391, 77.4132, 77.1116, 76.9709, 76.9302, 76.8543, 76.7951, 76.5786, 76.5490, 76.3324, 76.2973, 76.2862, 76.0678, 75.9808, 75.9087, 75.8605, 75.8568, 75.7347, 75.6977, 75.6773, 75.6607, 75.5533, 75.5182, 75.3276, 75.3220, 75.2535, 75.2387, 74.9833, 74.9112, 74.8038, 74.6576, 74.6021, 74.5170, 74.5059, 74.4652, 74.4337, 74.2598, 74.1580, 73.9840, 73.8508, 73.8119, 73.7027, 73.3881, 73.3030, 72.7904, 72.6812, 72.6682, 72.6405, 72.4461, 72.2796, 72.2592, 71.8595, 71.8243, 71.6041, 71.5023, 71.4505, 71.4487, 71.2877, 71.2081, 71.0859, 71.0082, 70.8287, 70.7140, 70.6529, 70.5863, 70.5826, 70.5326, 70.5048, 70.4271, 70.3013, 69.9978, 69.7628, 69.7498, 69.7035, 69.6388, 69.5943, 69.5888, 69.4074, 69.3686, 69.2168, 69.1039, 68.9577, 68.6043, 68.0953, 68.0287, 67.9047, 67.7844, 67.5809, 67.5642, 67.4661, 67.4014, 67.3681, 67.3051, 67.1848, 66.8480, 66.7722, 66.6556, 66.2003, 66.0578, 65.9394, 65.8505, 65.7451, 65.6229, 65.5526, 65.4823, 65.4804, 65.4693, 65.4194, 65.3860, 65.3768, 65.2880, 65.2861, 65.2454, 65.2417, 65.2121, 65.1381, 65.1177, 65.1084, 64.9419, 64.7679, 64.6291, 64.6199, 64.5607, 64.1776, 64.0203, 63.8593, 63.7464, 63.6354, 63.3041, 63.1098, 63.0691, 62.8766, 62.6582, 62.6434, 62.2992, 62.2585, 62.1956, 62.1863, 61.6015, 60.9372, 60.7391, 60.6799, 60.4153, 60.4005, 60.3339, 60.2413, 60.1358, 60.1266, 59.9415, 59.9267, 59.8564, 59.8249, 59.2920, 59.2734, 59.1124, 59.0958, 59.0736, 58.9588, 58.8793, 58.6553, 58.6109, 58.5906, 58.5850, 58.4684, 58.4129, 58.2223, 57.9595, 57.9429, 57.8429, 57.7689, 57.7041, 57.6856, 57.5746, 57.5542, 57.5024, 57.3914, 57.3025, 57.3007, 57.2100, 57.0694, 57.0175, 56.6585, 56.5956, 56.2773, 56.1459, 55.7924, 55.7221, 55.6592, 55.4556, 55.2169, 55.2021, 55.1022, 55.0429, 54.9041, 54.8690, 54.6673, 54.6525, 54.6117, 54.5932, 54.5303, 54.5303, 54.4989, 54.4748, 54.2194, 54.1805, 53.9511, 53.8881, 53.8456, 53.7327, 53.4866, 53.4736, 53.4125, 53.3311, 53.3293, 53.3256, 53.0350, 53.0239, 52.9573, 52.9166, 52.8518, 52.8259, 52.7963, 52.7056, 52.4780, 52.2689, 52.2670, 52.1948, 52.0135, 51.6026, 51.5471, 51.4823, 51.4472, 51.3158, 51.1122, 51.0604, 50.9919, 50.9216, 50.7551, 50.6810, 50.6662, 50.3461, 50.1999, 50.1684, 50.1536, 49.8334, 49.8131, 49.6650, 49.5022, 49.5003, 49.3726, 49.3023, 49.2709, 49.0469, 48.9988, 48.8341, 48.8082, 48.7471, 48.7231, 48.5954, 48.5898, 48.4899, 48.4603, 48.3585, 48.3233, 48.2308, 48.1438, 48.1235, 47.5775, 47.5035, 47.4110, 47.2740, 47.0446, 46.8965, 46.8317, 46.7133, 46.6393, 46.6078, 46.5838, 46.5597, 46.3413, 46.1341, 46.0896, 46.0212, 45.8805, 45.7584, 45.7547, 45.6955, 45.5881, 45.5752, 45.5678, 45.4993, 45.4660, 45.2384, 45.1736, 45.1384, 45.1255, 44.9015, 44.8941, 44.7091, 44.6443, 44.5370, 44.4926, 44.3741, 44.3501, 44.2964, 44.2483, 44.2409, 44.2353, 44.1983, 43.9559, 43.9448, 43.8152, 43.7893, 43.7653, 43.7153, 43.6894, 43.6228, 43.4081, 43.3137, 43.2934, 43.2878, 43.2360, 43.1324, 43.0768, 43.0287, 42.7826, 42.5901, 42.5790, 42.5568, 42.5254, 42.5198, 42.4846, 42.4754, 42.3810, 42.3551, 42.2200, 42.1978, 42.1978, 42.0090, 41.8480, 41.8110, 41.7129, 41.6482, 41.6056, 41.4390, 41.4113, 41.4039, 41.3835, 41.1503, 41.0541, 41.0319, 40.9338, 40.9116, 40.7932, 40.7562, 40.7562, 40.6895, 40.5600, 40.5248, 40.4323, 40.2917, 40.2306, 40.2232, 40.1325, 40.0788, 40.0751, 40.0733, 40.0437, 39.8975, 39.8975, 39.8160, 39.7938, 39.6791, 39.6310, 39.5755, 39.1110, 39.0443, 39.0425, 38.9481, 38.9259, 38.8556, 38.7760, 38.7501, 38.6317, 38.5854, 38.5761, 38.5521, 38.5484, 38.5021, 38.3652, 38.3559, 38.2985, 38.2689, 38.2134, 38.0839, 38.0376, 38.0358, 37.9710, 37.9691, 37.9673, 37.8988, 37.8599, 37.7915, 37.6564, 37.6508, 37.5120, 37.4473, 37.4454, 37.3473, 37.1974, 37.1697, 37.1345, 37.1049, 37.0531, 37.0457, 36.9902, 36.8254, 36.7329, 36.7329, 36.6145, 36.5627, 36.5108, 36.5090, 36.4868, 36.3646, 36.3054, 36.1999, 36.0093, 35.9742, 35.9557, 35.9464, 35.8354, 35.8280, 35.8150, 35.6836, 35.6614, 35.5855, 35.4467, 35.3542, 35.2191, 35.0026, 34.9193, 34.8619, 34.6473, 34.3660, 33.9311, 33.8700, 33.5906, 33.2704, 33.1076, 33.1039, 33.0965, 32.7967, 32.5302, 32.4561, 32.3784, 32.3044, 32.2267, 31.9435, 31.6733, 31.5882, 31.5808, 31.3846, 31.3310, 30.6795, 30.1281, 30.1262, 30.0170, 29.8061, 29.7080, 29.5396, 29.3119, 28.7271, 28.4162, 28.3126, 28.2608, 27.9980, 27.8314, 27.7741, 27.5483, 27.4558, 27.4391, 27.3262, 26.8432, 26.7507, 26.6545, 26.5712, 26.4083, 26.3991, 26.3176, 26.2991, 26.0363, 25.9309, 25.7365, 25.6958, 25.6958, 25.6459, 25.2739, 25.2628, 24.9833, 24.9038, 24.8797, 24.8297, 24.6502, 24.6058, 24.5522, 24.4504, 24.3800, 24.1783, 23.9451, 23.9303, 23.8563, 23.8138, 23.7952, 23.7619, 23.7101, 23.6157, 23.1253, 23.0180, 22.9199, 22.7496, 22.6812, 22.6072, 22.5812, 22.3758, 22.2037, 22.0131, 21.9502, 21.8725, 21.7873, 21.7503, 21.6356, 21.3043, 21.2451, 20.9953, 20.9805, 20.9342, 20.8583, 20.8380, 20.7898, 20.5715, 20.1791, 20.1551, 20.0237, 20.0015, 19.9293, 19.7831, 19.5074, 19.4741, 19.3260, 19.0799, 19.0503, 18.6764, 18.5691, 18.4636, 18.0842, 17.8455, 17.6401, 17.4883, 17.4495, 17.3255, 17.1515, 17.1478, 16.9979, 16.9776, 16.5945, 16.5908, 16.4594, 16.3169, 16.1337, 16.0911, 16.0319, 15.6451, 14.5607, 10.2136, 6.7455, 6.2088, 4.8949, 2.7944, 1.8913, 0.1480, 0.0000,
};
float[] ballRadius_orig = {
  0.6052, 0.3775, 0.4904, 0.3905, 0.5256, 0.4923, 0.4182, 0.5644, 1.1141, 1.0012, 0.4127, 1.3250, 1.1936, 0.6477, 0.5885, 0.3720, 0.4071, 1.1566, 0.4256, 0.4460, 0.4182, 0.5126, 0.4182, 0.4275, 0.7865, 0.4090, 0.7125, 1.0660, 0.5996, 0.7514, 1.1178, 1.8229, 0.7847, 0.7032, 0.7606, 0.4867, 0.3831, 0.4293, 0.6588, 1.0086, 0.5348, 0.4719, 0.4460, 0.4756, 0.8994, 0.4738, 0.7514, 0.3979, 0.4219, 0.7458, 0.5145, 0.3701, 0.6644, 0.8975, 0.8624, 0.3794, 0.3923, 0.5607, 0.5404, 0.4812, 0.3738, 0.4645, 0.3979, 1.1585, 1.2936, 0.3905, 0.3701, 0.7217, 0.3775, 1.4731, 0.3942, 0.5663, 1.1955, 0.6644, 0.5441, 1.5971, 0.5441, 0.9327, 1.1381, 0.5663, 0.6551, 0.4941, 0.5811, 2.4206, 0.4553, 0.9753, 0.5496, 0.4478, 0.3849, 0.5219, 0.4145, 0.3775, 0.4219, 0.5478, 0.5496, 0.4330, 0.8642, 0.4830, 0.3979, 1.0826, 1.3121, 0.3812, 0.3886, 0.5145, 0.6052, 1.1566, 1.0734, 1.0512, 0.7106, 1.0919, 0.5977, 0.3997, 0.3868, 1.2251, 0.5459, 0.3831, 1.0660, 0.6570, 0.7310, 2.8388, 0.6015, 0.9623, 1.2695, 0.4904, 1.3769, 0.8587, 0.4849, 0.5940, 1.7155, 0.5200, 0.6477, 0.4460, 0.4608, 1.1529, 0.4516, 0.5145, 0.3979, 1.5841, 0.4108, 0.7291, 0.5940, 0.4016, 0.4164, 2.6020, 0.3849, 0.7088, 0.4182, 0.7328, 0.5293, 0.9531, 0.4497, 0.8050, 2.8814, 0.8217, 0.5404, 0.3812, 0.6126, 0.6995, 0.5348, 0.3757, 0.4886, 0.7106, 0.6052, 0.5681, 0.3831, 1.1659, 0.5589, 0.4016, 1.0937, 0.8235, 0.6533, 0.4367, 0.4738, 0.6144, 0.3738, 0.4460, 0.5515, 0.3960, 1.4379, 0.3775, 0.3886, 0.6052, 0.4367, 0.5367, 0.3923, 0.8365, 0.6847, 0.7699, 0.4886, 2.9369, 0.5755, 0.5885, 0.6866, 0.4071, 0.4775, 0.5052, 1.1881, 0.3738, 0.4553, 2.3059, 0.3960, 3.1553, 1.1566, 0.4312, 0.5108, 0.5089, 0.9253, 0.5015, 0.4034, 0.6033, 0.4108, 0.9882, 0.4867, 0.4219, 0.4590, 0.7421, 0.3905, 0.4738, 1.0197, 0.5700, 0.4367, 0.5367, 0.3812, 0.4349, 0.7865, 0.4034, 0.4441, 0.9050, 2.9018, 0.3775, 0.3775, 0.7217, 0.8402, 0.7143, 0.4608, 0.6033, 0.4756, 0.5459, 0.6866, 0.3794, 0.4775, 0.6792, 0.4812, 0.4423, 0.4108, 0.4997, 0.7514, 0.5996, 0.4201, 0.4441, 0.4627, 0.9790, 0.7847, 1.2307, 0.3942, 0.4349, 1.3861, 2.2411, 0.5700, 0.4034, 0.8957, 0.4182, 0.5496, 0.3923, 1.0549, 0.7106, 0.6847, 0.4071, 0.3868, 0.3868, 0.4923, 1.6359, 0.6274, 0.4904, 0.6089, 0.4793, 0.7439, 0.6625, 0.4553, 0.6422, 1.5231, 0.7810, 0.4367, 0.4923, 0.5311, 0.6218, 0.4701, 0.4330, 0.6884, 0.5811, 0.5367, 0.3960, 0.5940, 0.7310, 1.1714, 0.5681, 0.3979, 0.8975, 0.4904, 1.9357, 0.4997, 3.7734, 0.4108, 0.5644, 0.7384, 2.1338, 1.1899, 0.4127, 0.4108, 3.5939, 0.7588, 0.5293, 0.6200, 1.5046, 0.3886, 0.4127, 0.4738, 0.5126, 0.6607, 0.6829, 1.0512, 0.5422, 0.4682, 0.8494, 0.4978, 0.4219, 0.5126, 0.5200, 2.4539, 0.4682, 0.4201, 0.6533, 1.1955, 0.3905, 0.4775, 0.4016, 0.4534, 0.6958, 1.4305, 0.4627, 0.6181, 0.5459, 2.0801, 0.6255, 0.3720, 0.8568, 0.4164, 0.5848, 0.4275, 0.8087, 0.5052, 0.8494, 0.9845, 0.5663, 0.5866, 0.6736, 0.7180, 0.6107, 0.6958, 0.4386, 0.6718, 0.4460, 0.4849, 2.5168, 0.4071, 1.5175, 0.9105, 0.7551, 0.6570, 2.3299, 0.6940, 1.0826, 0.4145, 0.7328, 0.4867, 0.7421, 0.4978, 0.4571, 0.5182, 0.4182, 0.3905, 0.3794, 1.0697, 1.6952, 0.5219, 0.5367, 0.4627, 0.5219, 0.4923, 1.7470, 0.6089, 0.4293, 0.4349, 0.6588, 0.6311, 0.5385, 0.6403, 0.3757, 0.4978, 1.3028, 0.6440, 0.4738, 0.9383, 0.5959, 1.0623, 0.4553, 0.4627, 0.6940, 0.4571, 0.4016, 0.7828, 0.4201, 0.9290, 0.4182, 0.6977, 0.6200, 0.6255, 0.3738, 0.4071, 3.1183, 1.1955, 0.8032, 0.6403, 0.5848, 4.0603, 0.9087, 4.1158, 0.4108, 0.4238, 0.6884, 0.5311, 0.5737, 0.7365, 0.4516, 0.5903, 0.5163, 0.4441, 0.5774, 0.4256, 0.5478, 0.8994, 0.5570, 0.5589, 0.8291, 0.5330, 1.7599, 0.4256, 0.4534, 0.3905, 1.5305, 0.3997, 0.3794, 0.4386, 0.6995, 0.6681, 1.0604, 0.5977, 0.4738, 0.4534, 0.7495, 0.5145, 0.5219, 0.7143, 1.1973, 1.0882, 0.5755, 0.5182, 0.5052, 1.7211, 0.4034, 0.5626, 0.4034, 0.6218, 1.0067, 0.3849, 0.6736, 0.4349, 0.6496, 0.7532, 0.7125, 0.4016, 0.4145, 0.5052, 1.5952, 0.5034, 0.4201, 1.2547, 0.3886, 0.4719, 0.6181, 0.3886, 0.6107, 0.4812, 0.5311, 0.8846, 0.4775, 0.5182, 0.6033, 2.1430, 0.3979, 2.1782, 0.8217, 0.5792, 1.3972, 0.6366, 0.4627, 1.6452, 1.5138, 0.7958, 0.6533, 0.4812, 0.3794, 0.4423, 0.3997, 0.6311, 2.1708, 0.4645, 0.6681, 0.5663, 1.8247, 0.3757, 0.7699, 0.6144, 0.4608, 2.0264, 0.4682, 0.8735, 0.5052, 0.3720, 0.9272, 0.3923, 0.5607, 0.4256, 0.5644, 0.7532, 0.5311, 0.4238, 0.4034, 1.3158, 0.4386, 1.1733, 0.4293, 0.3886, 0.5052, 0.4312, 0.6440, 0.4201, 1.0289, 1.8876, 0.5996, 0.4701, 0.3831, 0.4145, 0.4534, 0.5034, 0.7347, 0.6163, 0.4164, 0.4312, 0.4553, 0.6015, 0.3720, 0.4941, 0.6958, 0.9161, 1.4897, 0.4738, 0.6440, 0.9734, 0.6958, 0.8161, 0.5052, 0.3997, 0.8513, 0.5256, 2.8018, 0.5496, 0.9938, 0.3905, 0.8087, 0.5663, 0.6514, 0.4108, 0.3997, 0.4201, 0.4238, 0.7125, 0.8494, 0.3775, 0.7791, 0.4460, 0.4590, 0.5034, 0.4830, 0.4293, 0.4904, 0.4923, 0.3886, 0.5089, 0.6200, 0.4645, 0.7791, 0.9253, 0.7736, 0.8883, 0.6403, 0.5367, 0.4460, 0.3757, 0.5052, 0.7236, 1.1122, 2.2800, 0.6699, 0.7902, 0.7421, 0.6311, 0.6755, 0.3775, 0.3868, 0.4460, 0.4330, 0.6163, 2.1708, 0.4849, 0.5348, 0.8605, 0.5459, 0.4812, 0.4256, 0.4071, 0.9105, 0.4219, 2.7963, 1.6267, 0.4108, 0.3868, 0.3775, 0.6607, 0.8864, 0.4108, 0.4034, 0.8735, 0.8124, 0.3979, 0.5330, 0.4293, 0.6921, 0.4460, 0.6329, 1.6211, 0.3849, 0.8050, 0.5459, 1.1474, 0.4645, 0.6292, 1.8118, 0.7680, 0.5644, 0.5848, 1.0271, 0.3960, 0.6607, 0.4330, 0.7939, 0.6884, 0.3701, 0.7958, 0.6884, 0.3812, 0.5459, 0.7884, 0.4182, 0.9198, 0.7291, 0.8032, 0.5145, 0.6477, 0.3794, 0.3979, 0.5274, 0.6625, 0.4941, 0.5681, 0.4293, 0.9142, 0.4978, 0.4516, 1.3454, 1.3732, 1.0937, 0.4719, 0.7976, 0.4682, 0.5034, 0.4201, 0.9050, 0.6792, 0.4034, 0.6033, 0.6847, 0.5700, 0.4386, 0.6218, 0.5108, 0.4090, 0.6200, 0.5626, 1.1418, 0.4960, 1.0641, 0.4590, 0.6292, 0.4645, 0.3831, 1.8469, 1.5305, 0.7254, 2.3281, 0.6644, 1.4361, 0.6459, 0.6015, 0.7143, 0.8439, 0.4201, 0.6736, 0.5959, 0.4682, 0.7421, 0.3720, 0.5533, 0.3905, 0.3831, 0.4608, 0.7014, 0.5237, 0.4886, 0.3757, 1.0900, 0.4682, 0.6089, 0.4053, 0.6607, 1.3491, 0.4571, 0.6403, 0.3942, 0.6218,
};


int n_balls = xballs_orig.length;
float[] xballs = new float(n_balls);
float[] yballs = new float(n_balls);
float[] ballRadius = new float(n_balls);

int STARTUP_TIME = 750;
ArrayList<Ball> balls;
int t_start = millis();
boolean waitIntroAnimation = true;
float WIDTH_SCALAR = 0.80;
float HEIGHT_SCALAR = 0.66;
boolean REDRAW_SKETCH = true;

float ypad = 10;

RandomWalker walk;

void setup() {
  size( WIDTH_SCALAR * $(window).width(), HEIGHT_SCALAR* $(window).height() );
  //size(500, 500);
  noStroke();
  smooth();
  walk = new RandomWalker();
}


void draw() {

  if (REDRAW_SKETCH == true) {
    balls = new ArrayList<Ball>();
    float scaler = (height - 2 * ypad) / 100;
    float xmid = 43;

    for (int i = 0; i < n_balls; i++) {
      xballs[i] = round((scaler * (xballs_orig[i] - xmid)) + width / 2);
      yballs[i] = round((scaler * yballs_orig[i]) + ypad);
      ballRadius[i] = round(scaler * ballRadius_orig[i]);
    }
    createBalls();  
    REDRAW_SKETCH = false;
  }

  background(255);

  // stroke(128);
  // line(width / 4, 0, width / 4, height);
  // line(width / 2, 0, width / 2, height);
  // line(3 * width / 4, 0, 3 * width / 4, height);
  // line(0, height / 4, width, height / 4);
  // line(0, height / 2, width, height / 2);
  // line(0, 3 * height / 4, width, 3 * height / 4);

  if ((waitIntroAnimation == true) && ((millis() - t_start) < STARTUP_TIME)) {
    // do nothing
  } else {
    waitIntroAnimation = false;
    walk.step();

    // Render balls
    for (Ball b : balls) {
      b.updatePosition();
      if ((b.mouseOver()) || b.ballIsAnimated || walk.checkIntercept(b.currentPosition, b.radius))
      {
        if (b.ballInPosition==true) {
          b.animateBall();
        }
      }
      b.display();
    }
  }

}//draw



void createBalls() {
  for (int i = 0; i < n_balls; i++) {
    PVector pos = new PVector(xballs[i], yballs[i] );
    balls.add( new Ball(pos, ballRadius[i]));
  }
  for (Ball b : balls) {
    color c = color(random(0, 100), random(0, 255), 255);
    b.setColor(c); //use setter
  }
}


// Javascript Functions
void resizeSketch() {
	  println("indyscotmap RESIZE");
  size( WIDTH_SCALAR * $(window).width(), HEIGHT_SCALAR * $(window).height() );
  REDRAW_SKETCH = true;
}

void SketchVisible(boolean visible) {
  if (visible == true) {
    println("indyscotmap VISIBLE : " + millis() );
    loop();
  } else {
    println("indyscotmap NOT VISIBLE");
    noloop();
  }
}




/* ****************************************************** */
/* ****************************************************** */
class Ball
{

  PVector finalPosition;
  PVector currentPosition;
  float radius;
  color ballColor;
  //animation
  float animation_start_t;
  boolean ballInPosition = false;
  boolean ballIsAnimated = false;
  float backup_radius;
  color backup_ballColor;
  float animate_time = 1500; //millis
  float periods = 2;
  float f;
  int trans = 150;
  float pct = 0.75;
  float mass;
  float TRANSFADE_TIME = 5000;

  // Constructor
  Ball(PVector _finalPosition, float _r) {
    finalPosition = _finalPosition;
    radius = _r;
    f = periods / animate_time;
    currentPosition = new PVector( random(0, width), random(0, height));
    mass = 20 + radius;
  }

  void setColor(color c) {
    ballColor = c;
  }

  boolean mouseOver() {
    return (dist(mouseX, mouseY, finalPosition.x, finalPosition.y) <= radius);
  }

  void updatePosition() {
    if (ballInPosition == false) {
      float vx = (1/mass)*pct*(finalPosition.x - currentPosition.x);
      float vy = (1/mass)*pct*(finalPosition.y - currentPosition.y);
      currentPosition.x += vx;
      currentPosition.y += vy;
      if (abs(finalPosition.x - currentPosition.x) < 0.5 && abs(finalPosition.y - currentPosition.y) < 0.5 )
      {
        ballInPosition=true;
      }
    }
  }

  void animateBall() {
    //init animation
    if (!ballIsAnimated) {
      animation_start_t = millis();
      backup_radius = radius;
      backup_ballColor = ballColor;
      setColor(color(255, 100, 0));
    }
    //do animation
    ballIsAnimated = true;
    float m = millis()-animation_start_t;
    float scale = 0.5 + 0.5*(0.5*(1+sin(TWO_PI*m*f)));
    radius = backup_radius*scale;
    //end of animation
    if (millis()-animation_start_t > animate_time) {
      radius = backup_radius;
      setColor(backup_ballColor);
      ballIsAnimated = false;
    }
  }

  void display() {
    noStroke();
    float transFade = (min(millis(), TRANSFADE_TIME)/TRANSFADE_TIME)*trans;
    fill(ballColor, transFade);
    ellipse(currentPosition.x, currentPosition.y, radius*2, radius*2);
  }
};


/* ****************************************************** */
/* ****************************************************** */
class RandomWalker
{
  PVector pos = new PVector(0, 0);
  float tx, ty;
  int breadth = 1;

  RandomWalker() {
    tx = 0;
    ty = 1000;
  }

  void step() {
    //x- and y-location mapped from noise
    pos.x = map(noise(tx), 0, 1, -breadth*(width), (breadth+1)*width);
    pos.y = map(noise(ty), 0, 1, -breadth*(height), (breadth+1)*height);

    //watch walker
    //fill(255, 0, 0);
    //ellipse(pos.x, pos.y, 10, 10);

    //Move forward through “time.”
    tx += 0.01;
    ty += 0.01;
  }

  boolean checkIntercept(PVector obj, float r1)
  {
    float d = PVector.dist(obj, pos);
    if (d < r1) {
      return true;
    } else {
      return false;
    }
  }
};
